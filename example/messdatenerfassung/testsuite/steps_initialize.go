// Code generated by godogen; DO NOT EDIT.

package testsuite

import "github.com/cucumber/godog"

// InitializeSteps registers steps defined in "steps.go" with the [godog.ScenarioContext].
func InitializeSteps(ctx *godog.ScenarioContext) {
	// DO NOT EDIT, instead edit the "//godogen:step <PATTERN>" directive
	// of the respective function declaration.
	//
	// Note: there must be no space between the "//" and the "godogen:step",
	// see "directive comment" in https://tip.golang.org/doc/comment#syntax
	ctx.Given(`^eine Messvorlage "([^"]*)" mit den Dimensionen existiert:$`, eineMessvorlageMitDenDimensionenExistiert)
	ctx.Given(`^eine Messung für die Vorlage "([^"]*)" gestartet wurde$`, eineMessungFuerVorlageGestartetWurde)
	ctx.Given(`^der Wert ([0-9.]+) für (?:den|die) "([^"]*)" erfasst wurde$`, derWertFuerErfasstWurde)
	ctx.Given(`^die Messung ist vollständig$`, givenMessungIstVollständig)
	ctx.When(`^eine Messvorlage "([^"]*)" mit den Dimensionen erstellt wird:$`, eineMessvorlageMitDenDimensionenErstelltWird)
	ctx.When(`^versucht wird eine Messvorlage mit ungültigen Toleranzen zu erstellen:$`, versuchtWirdEineMessvorlageMitUngültigenToleranzenZuErstellen)
	ctx.When(`^versucht wird eine Messvorlage ohne Dimensionen zu erstellen$`, versuchtWirdEineMessvorlageOhneDimensionenZuErstellen)
	ctx.When(`^eine Messung für die Vorlage "([^"]*)" gestartet wird$`, eineMessungFuerVorlageGestartetWird)
	ctx.When(`^eine weitere Messung für die Vorlage "([^"]*)" gestartet wird$`, eineWeitereMessungFuerVorlageGestartetWird)
	ctx.When(`^versucht wird eine Messung für die Vorlage "([^"]*)" zu starten$`, versuchtWirdEineMessungFuerVorlageZuStarten)
	ctx.When(`^der Wert ([0-9.]+) für (?:den|die) "([^"]*)" erfasst wird$`, derWertFuerErfasstWird)
	ctx.When(`^versucht wird den Wert ([0-9.]+) für (?:den|die) "([^"]*)" zu erfassen$`, versuchtWirdDenWertFuerZuErfassen)
	ctx.When(`^der Messstatus abgefragt wird$`, derMessstatusAbgefragtWird)
	ctx.When(`^die Details der Messvorlage "([^"]*)" abgefragt werden$`, dieDetailsDerMessvorlageAbgefragtWerden)
	ctx.When(`^versucht wird die Details der Messvorlage "([^"]*)" abzufragen$`, versuchtWirdDieDetailsDerMessvorlageAbzufragen)
	ctx.Then(`^sollte die Messvorlage "([^"]*)" existieren$`, sollteDieMessvorlageExistieren)
	ctx.Then(`^sollte die Messung existieren$`, sollteDieMessungExistieren)
	ctx.Then(`^sollte ein Fehler auftreten$`, sollteEinFehlerAuftreten)
	ctx.Then(`^die Messung ist unvollständig$`, istDieMessungUnvollständig)
	ctx.Then(`^ist die Messung unvollständig$`, istDieMessungUnvollständig)
	ctx.Then(`^die Messung ist vollständig$`, istDieMessungVollständig)
	ctx.Then(`^ist die Messung vollständig$`, istDieMessungVollständig)
	ctx.Then(`^sollten (\d+) Messungen für die Vorlage "([^"]*)" existieren$`, solltenMessungenFuerVorlageExistieren)
	ctx.Then(`^die Messvorlage sollte (\d+) Dimension haben$`, sollteDieMessvorlageDimensionenHaben)
	ctx.Then(`^die Messvorlage sollte (\d+) Dimensionen haben$`, sollteDieMessvorlageDimensionenHaben)
	ctx.Then(`^sollte die Messvorlage (\d+) Dimension haben$`, sollteDieMessvorlageDimensionenHaben)
	ctx.Then(`^sollte die Messvorlage (\d+) Dimensionen haben$`, sollteDieMessvorlageDimensionenHaben)
	ctx.Then(`^die Fehlermeldung sollte "([^"]*)" enthalten$`, dieFehlermeldungSollteEnthalten)
	ctx.Then(`^das gemessene Teil ist maßhaltig$`, dasGemesseneTeilIstMaßhaltig)
	ctx.Then(`^das gemessene Teil ist nicht maßhaltig$`, dasGemesseneTeilIstNichtMaßhaltig)
	ctx.Then(`^(\d+) von (\d+) Dimensionen wurden gemessen$`, vonDimensionenWurdenGemessen)
	ctx.Then(`^die gemessenen Werte sind:$`, dieGemessenenWerteSind)
	ctx.Then(`^die Messvorlage sollte folgende Dimensionen haben:$`, sollteDieMessvorlageFollgendeDimensionenHaben)
	ctx.Then(`^sollte die Messvorlage folgende Dimensionen haben:$`, sollteDieMessvorlageFollgendeDimensionenHaben)
}
