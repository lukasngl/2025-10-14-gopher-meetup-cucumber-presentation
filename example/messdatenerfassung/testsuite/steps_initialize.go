// Code generated by godogen; DO NOT EDIT.

package testsuite

import "github.com/cucumber/godog"

// InitializeSteps registers steps defined in "steps.go" with the [godog.ScenarioContext].
func InitializeSteps(sc *godog.ScenarioContext, r1 *SzenarioState) {
	// DO NOT EDIT, instead edit the "//godogen:step <PATTERN>" directive
	// of the respective function declaration.
	//
	// Note: there must be no space between the "//" and the "godogen:step",
	// see "directive comment" in https://tip.golang.org/doc/comment#syntax
	sc.Given(`^eine Messvorlage "([^"]*)" mit den Dimensionen existiert:$`, r1.eineMessvorlageMitDenDimensionenExistiert)
	sc.Given(`^eine Messung für die Vorlage "([^"]*)" gestartet wurde$`, r1.eineMessungFuerVorlageGestartetWurde)
	sc.Given(`^der Wert ([0-9.]+) für (?:den|die) "([^"]*)" erfasst wurde$`, r1.derWertFuerErfasstWurde)
	sc.Given(`^die Messung ist vollständig$`, r1.givenMessungIstVollständig)
	sc.When(`^eine Messvorlage "([^"]*)" mit den Dimensionen erstellt wird:$`, r1.eineMessvorlageMitDenDimensionenErstelltWird)
	sc.When(`^versucht wird eine Messvorlage mit ungültigen Toleranzen zu erstellen:$`, r1.versuchtWirdEineMessvorlageMitUngültigenToleranzenZuErstellen)
	sc.When(`^versucht wird eine Messvorlage ohne Dimensionen zu erstellen$`, r1.versuchtWirdEineMessvorlageOhneDimensionenZuErstellen)
	sc.When(`^eine Messung für die Vorlage "([^"]*)" gestartet wird$`, r1.eineMessungFuerVorlageGestartetWird)
	sc.When(`^eine weitere Messung für die Vorlage "([^"]*)" gestartet wird$`, r1.eineWeitereMessungFuerVorlageGestartetWird)
	sc.When(`^versucht wird eine Messung für die Vorlage "([^"]*)" zu starten$`, r1.versuchtWirdEineMessungFuerVorlageZuStarten)
	sc.When(`^der Wert ([0-9.]+) für (?:den|die) "([^"]*)" erfasst wird$`, r1.derWertFuerErfasstWird)
	sc.When(`^versucht wird den Wert ([0-9.]+) für (?:den|die) "([^"]*)" zu erfassen$`, r1.versuchtWirdDenWertFuerZuErfassen)
	sc.When(`^der Messstatus abgefragt wird$`, r1.derMessstatusAbgefragtWird)
	sc.When(`^die Details der Messvorlage "([^"]*)" abgefragt werden$`, r1.dieDetailsDerMessvorlageAbgefragtWerden)
	sc.When(`^versucht wird die Details der Messvorlage "([^"]*)" abzufragen$`, r1.versuchtWirdDieDetailsDerMessvorlageAbzufragen)
	sc.Then(`^sollte die Messvorlage "([^"]*)" existieren$`, r1.sollteDieMessvorlageExistieren)
	sc.Then(`^sollte die Messung existieren$`, r1.sollteDieMessungExistieren)
	sc.Then(`^sollte ein Fehler auftreten$`, r1.sollteEinFehlerAuftreten)
	sc.Then(`^die Messung ist unvollständig$`, r1.istDieMessungUnvollständig)
	sc.Then(`^ist die Messung unvollständig$`, r1.istDieMessungUnvollständig)
	sc.Then(`^die Messung ist vollständig$`, r1.istDieMessungVollständig)
	sc.Then(`^ist die Messung vollständig$`, r1.istDieMessungVollständig)
	sc.Then(`^sollten (\d+) Messungen für die Vorlage "([^"]*)" existieren$`, r1.solltenMessungenFuerVorlageExistieren)
	sc.Then(`^die Messvorlage sollte (\d+) Dimension haben$`, r1.sollteDieMessvorlageDimensionenHaben)
	sc.Then(`^die Messvorlage sollte (\d+) Dimensionen haben$`, r1.sollteDieMessvorlageDimensionenHaben)
	sc.Then(`^sollte die Messvorlage (\d+) Dimension haben$`, r1.sollteDieMessvorlageDimensionenHaben)
	sc.Then(`^sollte die Messvorlage (\d+) Dimensionen haben$`, r1.sollteDieMessvorlageDimensionenHaben)
	sc.Then(`^die Fehlermeldung sollte "([^"]*)" enthalten$`, r1.dieFehlermeldungSollteEnthalten)
	sc.Then(`^das gemessene Teil ist maßhaltig$`, r1.dasGemesseneTeilIstMaßhaltig)
	sc.Then(`^das gemessene Teil ist nicht maßhaltig$`, r1.dasGemesseneTeilIstNichtMaßhaltig)
	sc.Then(`^(\d+) von (\d+) Dimensionen wurden gemessen$`, r1.vonDimensionenWurdenGemessen)
	sc.Then(`^die gemessenen Werte sind:$`, r1.dieGemessenenWerteSind)
	sc.Then(`^die Messvorlage sollte folgende Dimensionen haben:$`, r1.sollteDieMessvorlageFollgendeDimensionenHaben)
	sc.Then(`^sollte die Messvorlage folgende Dimensionen haben:$`, r1.sollteDieMessvorlageFollgendeDimensionenHaben)
}
